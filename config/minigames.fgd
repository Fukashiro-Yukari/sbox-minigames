
@BaseClass = BaseProperties_minigames
[
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	parentAttachmentName(parentAttachment) [ group="Hierarchy" ] : "Parent Model Bone/Attachment Name" : : "The name of the bone or attachment to attach to on the entity's parent in the movement hierarchy. Use !bonemerge to use bone-merge style attachment."

	useLocalOffset(boolean) [ group="Hierarchy" ] : "Use Model Attachment offsets" : 0 : "Whether to respect the specified local offset when doing the initial hierarchical attachment to its parent."
	local.origin(vector) [ group="Hierarchy" ] : "Model Attachment position offset" : : "Offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.angles(angle) [ group="Hierarchy" ] : "Model Attachment angular offset" : : "Angular offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.scales(vector) [ group="Hierarchy" ] : "Model Attachment scale" : : "Scale in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."

	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	tags(tags) : "Tags" : "" : "A list of general purpose tags for this entity, for interactions with other entities such as triggers."
]

//
// MapSettingsEntity
//
@PointClass base(BaseProperties_minigames) 
metadata
{
	entity_tool_name = "Map Settings"
	entity_tool_group = "Map"
	entity_tool_tip = "Change map settings for MiniGames"
}
= info_map_settings : ""
[
	god(boolean) : "Players God Mode" : 0 : ""
	teamtype(integer) : "Game Team Type" : 2 : ""
	plyinteam(integer) : "Players Need In Team" : 0 : ""
	respawn(boolean) : "Players Can Respawn" : 0 : ""
	time(float) : "Round Time" : 600 : ""
	playerscale(float) : "Round Time" : 1 : ""
	runspeed(float) : "Players Running Speed" : 300 : ""
	walkspeed(float) : "Players Walk Speed" : 150 : ""
	jumppower(float) : "Players Jump Power" : 268.32816 : ""
	allowflashlight(boolean) : "Players Allow Use Flashlight" : 1 : ""
	startweapon(string) : "Players Start Weapon" : "" : ""
	infiniteammo(boolean) : "Players Infinite Ammo" : 0 : ""
	playersnocollide(boolean) : "Players No Collide" : 1 : ""
	teamdamage(boolean) : "Players Team Damage" : 0 : ""
	playersdamage(boolean) : "Players Can Take Damage" : 1 : ""
	falldamage(boolean) : "Players Fall Damage" : 1 : ""
	dropafterdeath(boolean) : "Players Drop Weapons After Death" : 1 : ""
	gravity(float) : "Game Gravity" : 800 : ""
	tempgod(float) : "Players God Mode Time" : 3 : ""
	numrounds(integer) : "Game Rounds" : 15 : ""
	cantdrop(array:string) : "Players Can't Drop Weapons" :  : ""
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
]

//
// AK47
//
@PointClass base(BaseProperties_minigames) editormodel( "weapons/swb/css/ak47/css_w_rif_ak47.vmdl" ) = mg_ak47 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// AUG
//
@PointClass base(BaseProperties_minigames) editormodel( "weapons/css_ang/w_css_rif_aug.vmdl" ) = mg_aug : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// AWP
//
@PointClass base(BaseProperties_minigames) editormodel( "weapons/css_awp/css_w_awp.vmdl" ) = mg_awp : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Deagle
//
@PointClass base(BaseProperties_minigames) editormodel( "weapons/css_deagle/css_w_pist_deagle.vmdl" ) = mg_deagle : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Elites
//
@PointClass base(BaseProperties_minigames) editormodel( "weapons/css_elite/w_css_pist_elite_dropped.vmdl" ) = mg_elite : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// FAMAS
//
@PointClass base(BaseProperties_minigames) editormodel( "weapons/css_famas/w_css_rif_famas.vmdl" ) = mg_famas : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// FiveSeven
//
@PointClass base(BaseProperties_minigames) editormodel( "weapons/css_fiveseven/w_css_pist_fiveseven.vmdl" ) = mg_fiveseven : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// G3SG1
//
@PointClass base(BaseProperties_minigames) editormodel( "weapons/css_g3sg1/w_css_snip_g3sg1.vmdl" ) = mg_g3sg1 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// GALIL
//
@PointClass base(BaseProperties_minigames) editormodel( "weapons/css_galil/w_css_rif_galil.vmdl" ) = mg_galil : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Glock18
//
@PointClass base(BaseProperties_minigames) editormodel( "weapons/css_glock18/w_css_pist_glock18.vmdl" ) = mg_glock : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Knife
//
@PointClass base(BaseProperties_minigames) editormodel( "weapons/css_knife/css_w_knife.vmdl" ) = mg_knife : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// M249
//
@PointClass base(BaseProperties_minigames) editormodel( "weapons/css_m249/css_w_mach_m249para.vmdl" ) = mg_m249 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// M3
//
@PointClass base(BaseProperties_minigames) editormodel( "weapons/css_super90/css_w_shot_m3super90.vmdl" ) = mg_m3 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// M4A1
//
@PointClass base(BaseProperties_minigames) editormodel( "weapons/css_m4a1/css_w_m4a1.vmdl" ) = mg_m4a1 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// MAC10
//
@PointClass base(BaseProperties_minigames) editormodel( "weapons/swb/css/mac10/css_w_smg_mac10.vmdl" ) = mg_mac10 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// MP5
//
@PointClass base(BaseProperties_minigames) editormodel( "weapons/css_mp5/w_css_smg_mp5.vmdl" ) = mg_mp5navy : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// P228
//
@PointClass base(BaseProperties_minigames) editormodel( "weapons/css_p228/w_css_pist_p228.vmdl" ) = mg_p228 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// P90
//
@PointClass base(BaseProperties_minigames) editormodel( "weapons/css_p90/w_css_smg_p90.vmdl" ) = mg_p90 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// RPG
//
@PointClass base(BaseProperties_minigames) editormodel( "weapons/swb/explosives/rpg-7/swb_w_rpg7.vmdl" ) = mg_rpg : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Scout
//
@PointClass base(BaseProperties_minigames) editormodel( "weapons/css_scout/w_css_snip_scout.vmdl" ) = mg_scout : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// SG550
//
@PointClass base(BaseProperties_minigames) editormodel( "weapons/css_sg550/w_css_snip_sg550.vmdl" ) = mg_sg550 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// SG552
//
@PointClass base(BaseProperties_minigames) editormodel( "weapons/css_sg552/w_css_rif_sg552.vmdl" ) = mg_sg552 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// TMP
//
@PointClass base(BaseProperties_minigames) editormodel( "weapons/css_tmp/w_css_smg_tmp.vmdl" ) = mg_tmp : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// UMP45
//
@PointClass base(BaseProperties_minigames) editormodel( "weapons/css_ump45/w_css_smg_ump45.vmdl" ) = mg_ump45 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// USP
//
@PointClass base(BaseProperties_minigames) editormodel( "weapons/css_usp/w_css_pist_usp.vmdl" ) = mg_usp : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// XM1014
//
@PointClass base(BaseProperties_minigames) editormodel( "weapons/css_xm1014/w_css_shot_xm1014.vmdl" ) = mg_xm1014 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// CarEntity
//
@PointClass base(BaseProperties_minigames) model() = ent_car : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) : "FX Color (R G B)" : "255 255 255" : "The FX color is used by the selected Render Mode."
	renderamt(integer) [ group="Rendering" ] : "FX Amount (0 - 255)" : 255 : "The FX amount is used by the selected Render Mode."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged"
]

//
// Sandbox.BlueSpawnPoint
//
@PointClass base(BaseProperties_minigames) editormodel( "models/editor/playerstart.vmdl", fixedbounds ) 
metadata
{
	entity_tool_name = "Blue Team Player Spawnpoint"
	entity_tool_group = "Player"
	entity_tool_tip = "Defines a point where the player can (re)spawn"
}
= info_player_blue : "This entity defines the spawn point of the player in first person shooter gamemodes."
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
]

//
// Sandbox.RedSpawnPoint
//
@PointClass base(BaseProperties_minigames) editormodel( "models/editor/playerstart.vmdl", fixedbounds ) 
metadata
{
	entity_tool_name = "Red Team Player Spawnpoint"
	entity_tool_group = "Player"
	entity_tool_tip = "Defines a point where the player can (re)spawn"
}
= info_player_red : "This entity defines the spawn point of the player in first person shooter gamemodes."
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
]

